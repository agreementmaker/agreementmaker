package am.tools.SGMLParser.GigaWordParser;

import java.util.ArrayList;

/* Generated By:JavaCC: Do not edit this line. GigaWordParser.java */
public class GigaWordParser implements GigaWordParserConstants {
        public static void main(String args[]) throws ParseException {
                GigaWordParser parser = new GigaWordParser(System.in);
                parser.start();
                
        }

  private static ArrayList<String> text;
  
  public static ArrayList<String> getText() { return text; }
  
  static final public void start() throws ParseException {
                String txt;
 txt = new String();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GWENG_TAG:
      jj_consume_token(GWENG_TAG);
                System.out.println(doc(txt));
      jj_consume_token(GWENG_END_TAG);
      break;
    default:
      jj_la1[0] = jj_gen;
                                                                   System.out.println(doc(txt));
    }
  }

  static final public String pcdata(String txt) throws ParseException {
                             Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      n = jj_consume_token(CHAR);
            txt+=(n.image + " ");
                                    txt=pcdata(txt);
      break;
    default:
      jj_la1[1] = jj_gen;
                                                         txt+=" ";
    }
 {if (true) return txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String doc(String txt) throws ParseException {
 txt=doc_tag_begin(txt);
 txt+=doc_content();
    jj_consume_token(DOC_END_TAG);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[2] = jj_gen;
           txt+=doc(txt);
    }
 {if (true) return txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String doc_content() throws ParseException {
                        String hdl="", dtl="", txt="";
    hdl = headline();
    dtl = dateline();
    txt = text_section();
                                                    {if (true) return hdl + " " + dtl + " " + txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String doc_tag_begin(String txt) throws ParseException {
    jj_consume_token(LT);
    jj_consume_token(DOC_TAG);
 txt=doc_attributes();
    jj_consume_token(GT);
 {if (true) return txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String doc_attributes() throws ParseException {
                           String id="", type="";
      id+=id_attribute();
                            type+=type_attribute();
                                                      {if (true) return id + " " + type;}
    throw new Error("Missing return statement in function");
  }

  static final public String id_attribute() throws ParseException {
                         String txt; Token n;
    n = jj_consume_token(ID_ATTR);
 txt=(n.image);
 txt+=doc_attributes_value();
 {if (true) return txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String type_attribute() throws ParseException {
                           String txt; Token n;
    n = jj_consume_token(TYPE_ATTR);
 txt=(n.image);
 txt+=doc_attributes_value();
 {if (true) return txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String doc_attributes_value() throws ParseException {
                                 String txt = "";
    jj_consume_token(QUOTE);
 txt+=pcdata(txt);
    jj_consume_token(QUOTE);
 {if (true) return txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String headline() throws ParseException {
                     String txt = ""; Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HEADLINE_TAG:
      n = jj_consume_token(HEADLINE_TAG);
                      txt=(n.image + ": " + pcdata(txt));
      jj_consume_token(HEADLINE_END_TAG);
      headline();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
 {if (true) return txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String dateline() throws ParseException {
                     String txt = ""; Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATELINE_TAG:
      n = jj_consume_token(DATELINE_TAG);
                      txt=(n.image + ": " + pcdata(txt));
      jj_consume_token(DATELINE_END_TAG);
      dateline();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
 {if (true) return txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String text_section() throws ParseException {
                         String txt = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT_TAG:
      jj_consume_token(TEXT_TAG);
      txt = text_content();
      jj_consume_token(TEXT_END_TAG);
                                                  txt+=text_section();
      break;
    default:
      jj_la1[5] = jj_gen;

    }
 {	 if (true) {
	 	return txt;
	 }
 }
    throw new Error("Missing return statement in function");
  }

  static final public String text_content() throws ParseException {
                         String txt = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P_TAG:
      txt = p_section();
      break;
    case corruption_TAG:
      txt = corrupt_section();
      break;
    default:
      jj_la1[6] = jj_gen;
      txt = pcdata(txt);
    }
 {if (true) return txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String p_section() throws ParseException {
                      String cont = "", sect = "";
    jj_consume_token(P_TAG);
    cont = p_content();
    text.add(cont);
    jj_consume_token(P_END_TAG);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P_TAG:
      sect = p_section();
      break;
    default:
      jj_la1[7] = jj_gen;
                     sect = " ";
    }
 {if (true) return cont + sect;}
    throw new Error("Missing return statement in function");
  }

  static final public String p_content() throws ParseException {
                      String txt = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case corruption_TAG:
      txt = corrupt_section();
      break;
    default:
      jj_la1[8] = jj_gen;
      txt = pcdata(txt);
      
    }
 {if (true) return txt;}
    throw new Error("Missing return statement in function");
  }

  static final public String corrupt_section() throws ParseException {
                            Token n;
    n = jj_consume_token(corruption_TAG);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case corruption_END_TAG:
      jj_consume_token(corruption_END_TAG);
      break;
    default:
      jj_la1[9] = jj_gen;

    }
 {if (true) return n.image;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GigaWordParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x1000000,0x1,0x4000,0x10000,0x40000,0x500000,0x100000,0x400000,0x800000,};
   }

  /** Constructor with InputStream. */
  public GigaWordParser(java.io.InputStream stream) {
     this(stream, null);
     text = new ArrayList<String>();
  }
  /** Constructor with InputStream and supplied encoding */
  public GigaWordParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GigaWordParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GigaWordParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GigaWordParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GigaWordParser(GigaWordParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GigaWordParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
